{"version":3,"sources":["../../src/Loaders.js"],"names":[],"mappings":";;;;;;UAKgB,Y,GAAA,Y;UAmBA,O,GAAA,O;UAaA,S,GAAA,S;UAoBA,O,GAAA,O;;AAxDhB,MAAI,WAAW,EAAf;;AAEA,MAAI,gBAAgB,IAAI,MAAM,aAAV,EAApB;;AAEO,WAAS,YAAT,CAAuB,GAAvB,EAA4B;;AAEjC,WAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAqB;AACvC,oBAAc,IAAd,CACE,GADF,EAEE,UAAW,OAAX,EAAqB;AACnB,iBAAS,GAAT,IAAgB,OAAhB;AACA,gBAAQ,OAAR;AACD,OALH,EAME,UAAW,GAAX,EAAiB;;AAEhB,OARH,EASE,UAAW,GAAX,EAAiB;AACf,eAAO,uBAAuB,GAA9B;AACD,OAXH;AAaD,KAdM,CAAP;AAeD;;AAEM,WAAS,OAAT,CAAkB,GAAlB,EAAuB;AAC5B,QAAI,CAAC,SAAS,GAAT,CAAL,EAAoB;AAClB,YAAM,2BAA2B,GAAjC;AACD;AACD,WAAO,SAAS,GAAT,CAAP;AACD;;AAED,MAAI,QAAQ,EAAZ;;AAEA,MAAI,aAAa,IAAI,MAAM,UAAV,EAAjB;;;;AAIO,WAAS,SAAT,CAAmB,GAAnB,EAAwB;AAC7B,WAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC3C,UAAI,MAAM,IAAI,cAAJ,EAAV;AACA,UAAI,IAAJ,CAAS,KAAT,EAAgB,GAAhB;AACA,UAAI,IAAJ,CAAS,IAAT;AACA,UAAI,kBAAJ,GAAyB,YAAY;AACnC,YAAI,IAAI,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,cAAI,IAAI,MAAJ,KAAe,GAAnB,EAAwB;AACtB,gBAAI,OAAO,KAAK,KAAL,CAAW,IAAI,YAAf,CAAX;;AAEA,kBAAM,GAAN,IAAa,IAAb;AACA,oBAAQ,IAAR;AACD,WALD,MAKO;AACL,mBAAO,YAAY,IAAI,MAAvB;AACD;AACF;AACF,OAXD;AAYD,KAhBM,CAAP;AAiBD;;AAEM,WAAS,OAAT,CAAkB,GAAlB,EAAuB;AAC5B,WAAO,MAAM,GAAN,CAAP;AACD","file":"Loaders.js","sourcesContent":["\nvar textures = {};\n\nvar textureLoader = new THREE.TextureLoader();\n\nexport function CacheTexture (url) {\n\n  return new Promise ((resolve, reject) => {\n    textureLoader.load(\n      url,\n      function ( texture ) {\n        textures[url] = texture;\n        resolve(texture);\n      },\n      function ( xhr ) {\n        // console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n      },\n      function ( xhr ) {\n        reject(\"Error downloading \" + url);\n      }\n    );\n  });\n}\n\nexport function Texture (url) {\n  if (!textures[url]) {\n    throw \"Couldn't find texture \" + url;\n  }\n  return textures[url];\n}\n\nvar jsons = {};\n\nvar jsonLoader = new THREE.JSONLoader();\n// var _JSON = JSON;\n// console.log(_JSON);\n\nexport function CacheJSON(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.send(null);\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          var json = JSON.parse(xhr.responseText);\n\n          jsons[url] = json;\n          resolve(json);\n        } else {\n          reject('Error: ' + xhr.status);\n        }\n      }\n    }\n  });\n};\n\nexport function getJSON (url) {\n  return jsons[url];\n}\n"]}